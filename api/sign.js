// ========================================
// D√âCODAGE TRANSACTION NON-SIGN√âE JUPITER
// ========================================
console.log('üîì D√©codage transaction Jupiter non-sign√©e...');

const transactionBuffer = Buffer.from(transaction, 'base64');
let tx;

try {
  // Jupiter envoie des transactions NON SIGN√âES
  // Il faut les d√©coder diff√©remment
  
  // Essayer VersionedTransaction sans signature
  const versionedTx = VersionedTransaction.deserialize(transactionBuffer);
  tx = versionedTx;
  console.log('‚úÖ VersionedTransaction non-sign√©e d√©cod√©e');
  
} catch (versionError) {
  try {
    // Fallback Legacy sans signature
    const legacyTx = Transaction.from(transactionBuffer);
    tx = legacyTx;
    console.log('‚úÖ Legacy Transaction non-sign√©e d√©cod√©e');
    
  } catch (legacyError) {
    console.log('üîç Errors - Versioned:', versionError.message);
    console.log('üîç Errors - Legacy:', legacyError.message);
    throw new Error(`Transaction format non support√©`);
  }
}
